## -----------------------------------------------------------------------
## 1. Global image (optional override)
## -----------------------------------------------------------------------
image:
  registry: docker.io
  repository: bitnami/mariadb
  tag: 11.4.7-debian-12-r1 # choose the version you want (bitnami chart tag)

## @param architecture MariaDB architecture (`standalone` or `replication`)
architecture: replication

## @param secondary.replicaCount Number of MariaDB secondary replicas
replicaCount: 3

## -----------------------------------------------------------------------
## 2. Persistence settings
## -----------------------------------------------------------------------
persistence:
  enabled: true # ❱ Enable PVC for data durability
  storageClass: "managed-nfs-storage" # ❱ Replace with your preferred StorageClass
  accessModes:
    - ReadWriteOnce
  size: 5Gi # ❱ Adjust based on expected DB size
  annotations: {} # Add any annotations you need (e.g., for encryption)

## -----------------------------------------------------------------------
## 3. Resources (CPU/memory requests & limits)
## -----------------------------------------------------------------------
resources:
  requests:
    memory: 1Gi
    cpu: 100m
  limits:
    memory: 1Gi
    cpu: 200m

## -----------------------------------------------------------------------
## 4. Authentication & Vault integration
###
### We’ll tell the chart to read root credentials from the Kubernetes Secret
### that’s populated by Vault. The Bitnami chart expects these keys:
###   root.password  (MariaDB root user)
###   existingSecret: <secret name>
## -----------------------------------------------------------------------
auth:
  ## @param auth.existingSecret Use existing secret for password details (`auth.rootPassword`, `auth.password`, `auth.replicationPassword` will be ignored and picked up from this secret). The secret has to contain the keys `mariadb-root-password`, `mariadb-replication-password` and `mariadb-password`
  ##
  existingSecret: "mariadb-auth-secret"

  # (Optional) If you want an "application" user created at install-time:
  # database:
  #   user:        # we’ll pull from mariadb-app-secret
  #     existingSecret: mariadb-app-secret
  #     existingUsernameKey: username
  #     existingPasswordKey: password
  #     existingDatabaseKey: database

  # Disable random generation since Vault is providing the values
  password: ""
  username: ""
  database: ""

## -----------------------------------------------------------------------
## 5. TLS settings (enable client certificates)
###
### Tell the chart to use the Secret created by cert-manager:
##   tls.enabled: true
##   tls.certFilename: tls.crt
##   tls.keyFilename: tls.key
##   tls.caCertificate: (pass via commandline or embedded)
## -----------------------------------------------------------------------
tls:
  enabled: true
  # certFilename: tls.crt
  # keyFilename: tls.key
  ## @param tls.autoGenerated.enabled Enable automatic generation of certificates for TLS
  ## @param tls.autoGenerated.engine Mechanism to generate the certificates (allowed values: helm, cert-manager)
  autoGenerated:
    enabled: true
    engine: cert-manager
    ## @param tls.autoGenerated.certManager.existingIssuer The name of an existing Issuer to use for generating the certificates (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.existingIssuerKind Existing Issuer kind, defaults to Issuer (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.keyAlgorithm Key algorithm for the certificates (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.keySize Key size for the certificates (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.duration Duration for the certificates (only for `cert-manager` engine)
    ## @param tls.autoGenerated.certManager.renewBefore Renewal period for the certificates (only for `cert-manager` engine)
    certManager:
      existingIssuer: "my-ca-clusterissuer"
      existingIssuerKind: "ClusterIssuer"
      keySize: 2048
      keyAlgorithm: RSA
      duration: 2160h
      renewBefore: 48h

  # caCertificate: ca.crt
  # caCertificate: |-
  #   # Optional: if your clients need the CA bundle, you can either mount it
  #   # from the same Secret or supply it here. Example:
  #   # |
  #   # -----BEGIN CERTIFICATE-----
  #   # MIIF...
  #   # -----END CERTIFICATE-----
  #   # If using a cluster-issuer that creates ca.crt in the same Secret, the chart
  #   # may automatically pick it up. Double-check Bitnami’s doc.
  # existingSecret: mariadb-tls-secret

## -----------------------------------------------------------------------
## 6. Liveness & Readiness probes (keep defaults or tweak)
## -----------------------------------------------------------------------
livenessProbe:
  initialDelaySeconds: 120
  periodSeconds: 30
readinessProbe:
  initialDelaySeconds: 15
  periodSeconds: 10

## -----------------------------------------------------------------------
## 7. Extra flags for production-grade configuration
##    - Skip upgrades if the PVC cannot accommodate the new chart
##    - Disable the default init DB scripts to ensure users/passwords only come from Vault.
## -----------------------------------------------------------------------
primary:
  config:
    my.cnf: |-
      [mysqld]
      # Production-grade tuning knobs:
      max_connections = 500
      # query_cache_size = 64M
      log_error = /bitnami/mariadb/logs/mariadb.log
      slow_query_log = 1
      slow_query_log_file = /bitnami/mariadb/logs/mariadb-slow.log
      innodb_buffer_pool_size = 2G
      innodb_flush_log_at_trx_commit = 2
      innodb_file_per_table = 1
      # (Add any additional MySQL tuning you require…)

  extraFlags: "" # e.g., “--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci”

## -----------------------------------------------------------------------
## 8. (Optional) Backup sidecar / schedule
### If you want to enable automated backups (to S3 or similar), you can uncomment:
##
## backup:
##   enabled: true
##   schedule: "0 3 * * *"        # daily at 03:00
##   storage:
##     s3:
##       bucket: my-db-backups
##       region: us-east-1
##       credentialsSecret: s3-creds-secret
##
## Configure according to your backup target (S3, GCS, Azure, etc.).
## -----------------------------------------------------------------------

## -----------------------------------------------------------------------
## 9. (Optional) Metrics exporter
### If you want to scrape MariaDB metrics via Prometheus, enable exporter:
##
## metrics:
##   enabled: true
##   serviceMonitor:
##     enabled: true
##     namespace: monitoring
##     # Add labels so Prometheus Operator picks up the ServiceMonitor
##     labels:
##       release: prometheus-stack
## -----------------------------------------------------------------------
