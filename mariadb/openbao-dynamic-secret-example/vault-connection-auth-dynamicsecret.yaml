apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultConnection
metadata:
  name: app1-vault-connection
  namespace: app1
spec:
  # HTTPS
  # address: https://openbao.openbao.svc.cluster.local:8200
  # caCertSecretRef: openbao-ca-bundle
  # skipTLSVerify: true

  # HTTP
  address: http://openbao.openbao.svc.cluster.local:8200
  skipTLSVerify: false

---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultAuth
metadata:
  name: app1-vault-auth
  namespace: app1
spec:
  vaultConnectionRef: app1-vault-connection # <- Reference to VaultConnection CR
  method: kubernetes
  mount: kubernetes
  kubernetes:
    role: app1-role
    serviceAccount: app1-sa
---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultDynamicSecret
metadata:
  name: mydb-dynamic-secret
  namespace: app1
spec:
  # Reference to your VaultAuth object (e.g. openbao-auth) that holds
  # the kube-auth/k8s-auth configuration for Vault
  vaultAuthRef: app1-vault-auth

  # The mount path where you enabled the Database secrets engine in Vault.
  # If you did `vault secrets enable database`, this is "database"
  mount: database

  # Engine type—telling the operator this is a DB-dynamic secret
  # path: database

  # The path under the mount where your role is defined.
  # If you created the role via:
  #   vault write database/roles/my-app-role …
  # then path is "creds/my-app-role"
  path: creds/app1-role

  # Optional parameters to pass to the Vault call;
  # usually empty for database/creds, but you could override TTLs here.
  # params:
  #   ttl: "1h"
  #   max_ttl: "24h"

  # Where to write the resulting username/password in Kubernetes
  destination:
    # Will create or update a Secret named "mydb-app-credentials"
    create: true
    name: mydb-app-credentials
    # Secret type (Opaque is typical for user/password)
    # type: Opaque
    # # Map the keys from Vault’s JSON ("username","password") into
    # # keys in the K8s Secret
    # keys:
    #   username: username
    #   password: password
